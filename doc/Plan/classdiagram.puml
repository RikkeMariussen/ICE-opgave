@startuml
'https://plantuml.com/class-diagram

class Main{
+ static void main(String[] args)
}
class StartMenu{
- static AppState currentState
- static SelectedGame selectedGame
- static Difficulty selectedDifficulty
- GUI gui
- FileIO io
- GamesButton gameButton
- static DeathScreen deathScreen
- boolean testing
- IGames snake
- IGames brickBreaker
- IGames ballDrop
- IGames pacMan
- ArrayList<GamesButton> buttonsFrontPage
- ArrayList<GamesButton> buttonGameOption
- ArrayList<GamesButton> buttonsDifficulties
- GamesButton butt1, butt2, butt3, butt4, butt5, playGame, highScore, goBack, easy, medium, hard, goBack2, moreGamesComingSoon
enum AppState
enum SelectedGame
enum Difficulty
+ void settings()
+ void setup()
+ void draw()
- void checkGameSelection()
- void checkOptionSelection()
- void checkDifficultySelection()
- void checkHighScoreSelection()
+ void showGames()
+ void showOptions()
+ void showDifficulties()
+ void gaming()
+ static synchronized void endCurrentGame()
+ void setDeathState(String gameTitle, int score)
+ void keyPressed()
+ void showHighScores(SelectedGame game)
+ runDialog()
}

interface IGames{
void updateGame()
void displayGame()
void restartGame()
String getTitle()
String playGame()
String setHighScore()
String getHighScore()
String keyPressed()
String howToPlay()
String youDied()
String difficulties()
String lives()
}

abstract class AGames{
- title
- score
- lives
}

package Games <<Folder>> {

class BrickBreaker{
- PApplet parent
- PVector ballPosition
- PVector ballVelocity
- float ballSpeed
- float ballRadius
- Bricks[] bricks
- int numBricks
- int score
- boolean gameOver
- int diff
- PlayerPlate playerPlate
- boolean gameStart
+ void logic()
+ void drawGame()
+ void drawText()
+ void displayGame()
}

class BallDrop{
- PApplet parent
- int score
- int numberOfBalls
- int ballsInterval
- boolean gameOver
- boolean startGame
- int diff
- PlayerPlate playerPlate
- Bombs bombs
- PointObject ball
- ArrayList<PointObject> dropBalls
- Timer ballsTimer
+ void gameSettings()
+ void displayGame()
+ void drawGame()
+ boolean intersect()
+ void displayScore()
}

class Snake{
- PApplet parent
- SnakeObject snake
- PointObject apple
- int score
- int scl
- boolean gameover
- boolean startGame
- int difficulty
+ void placeFood()
+ void incrementScore()
+ void resetGameKey()
+ void displayScore()
+ void displaySnake()
}

class PacMan{
'Kan den slettes
}
}

package Utility <<Folder>> {
class GUI{
+ void startScreen()
}

class FileIO{
- ArrayList<String[]> gameList
- final String highScorePath
+ ArrayList<String[]> getGameHighScore(String gameTitle)
+ ArrayList<String> getScoresOnly(String gameTitle)
+ ArrayList<String> getNamesOnly(String gameTitle)
- ArrayList<String> getEntryOnly(String gameTitle, int index)
+ int getHighestScore(String gameTitle)
+ int getLowestScore(String gameTitle)
+ int getScoreIndex(String gameTitle, int score)
+ void loadHighScoreCSV()
- void loadFromCSV()
+ void saveHighScore(String gameTitle, int score, String playerName)
- void saveGameHighScore(String gameTitle, int score, String playerName)
- List<String> modifyScore(String gameTitle, int score, String playerName, List<String> gameData)
- List<String> isGamePresent(List<String> data, String gameTitle)

}
}

class Balls{
# PVector position
# PVector velocity
# float radius
# Bricks bricks
+ void settings()
+ void setup()
+ void draw()
}

class Bombs{
- PApplet parent
- int x, y, w, h
- float speed
- int color
+ void update()
+ void display()
+ void boom()
}

class Timer{
- int startTimer
- int interval
+ void startTimer()
+ boolean complete()
}

class PlayerPlate{
- PApplet parent
- int size
- int x, y, w, h
- int color
+ void update()
+ void display()
}

class SnakeObject{
- PApplet parent
+ ArrayList<SnakeSegment> body
- int xDir, yDir
- int scl

+ void setDirection()
+ void update()
+ boolean eat(int foodX, int foodY)
+ boolean checkSelfCollision(int headX, int headY, ArrayList<SnakeSegment> body)
}

class SnakeSegment{
- PApplet parent
# int x, y
- int scl
+ void show()
}

class DeathScreen{
- FileIO io
- PApplet parent
- String playerName
- int score
- String gameTitle
+ void display()
- void displayScoreNotHighEnough()
- void displayEnterScore()
+ void keyPressed()
- void saveScore(String playerName)
}

class PointObject{
'Apples, cheese and cherries for Snake and PacMan
- PApplet parent
- int x, y, w, h
- float speed, minSpeed, maxSpeed
- int color
- int score

+ void displayRoundObject()
+ void displaySquareObject()
+ void updateRoundObject()
+ void setSpeed(float speed)
+ float getSpeed()
+ int getX()
+ int getY()
+ void setX()
+ void setY()
+ int getW()
+ int getH()
}

class Bricks{
- PApplet parent
- int brickX, brickY
- int width, height
- int color
- int durability
- int initialDurability

+ void display()
+ boolean checkCollision(PVector ballPosition, float ballRadius)
- float clamp(float value, float min, float max)
+ void decreaseDurability()
+ int getDurability()
+ void remove()
+ int getBrickX()
+ int getBrickY()
+ int getColor()
+ void reset()
}
package PacMan <<Folder>> {
class PacManPlayer{
- boolean god
- PApplet parent
- int hP
- Score score
- int start
- int xPos
- int yPos
- Timer timer

+ void drawPacMan()
+ void movePacMan()
- void godTimer()
+ void setHP()
+ int getHP()
}

class Ghosts{
}

class PacManGame{
+ static empty
+ static wall
+ static cheese
+ static cherry
+ static player
+ static int int[][] map

+ static void populateMap()
+ static void printMap()
+ static void populateMapCherry()
+ static void clearGhostPit()
}

class Map{
# static int wallSpacing
- PApplet parent
+ void setupUp()
+ void createMap()
- void createBorder()
- void createUpperWallSkeleton()
- void createLowerWallSkeleton()
- void createGhostPit()
- void horizontalBlockConstructor(int xPos, int yPos, int width)
- void verticalBlockConstructor(int xPos, int yPos, int height)
+ static int getWallSpacing()
}

class Score{
- PApplet parent
- static int currentAmountOfCheese
- int score
+ void setCurrentAmountOfCheese()
+ void checkScore()
+ void drawScore()
+ int getScore()
+ void setScore(int score)
}

class DefNotMain{
- PApplet parent
- boolean gameStart
- Map map
- Cherry cherry
- Cheese cheese
- PacManPlayer pacManPlayer
- Score score
+ void pacManDraw()
}

class Cherry{
- PApplet parent
+ void createCherry(int xPos, int yPos)
+ void spawnCherry()
+ void spawnCherry1()
+ void spawnCherry2()
+ void spawnCherry3()
+ void spawnCherry4()
}

class Cheese{
- PApplet parent
+ void spawnCheese()
- void createCheese(int xPos, int yPos)
}
}
Main <-- StartMenu
StartMenu <- IGames

IGames <|-- AGames

AGames <-- Games
'AGames <|-- Snake
'AGames <|-- BrickBreaker
'AGames <|-- BallDrop
'AGames <|-- PacMan

StartMenu <-- Utility
'startMenu <-- GUI
'startMenu <-- TextUI
'startMenu <-- FileIO

BrickBreaker <-- Bricks
BrickBreaker <-- PlayerPlate
BrickBreaker <-- Balls
BrickBreaker <-- DeathScreen

BallDrop <-- PlayerPlate
BallDrop <-- PointObject
BallDrop <-- Bombs
BallDrop <-- Timer
BallDrop <-- DeathScreen

Snake <-- SnakeObject
Snake <-- PointObject
Snake <-- SnakeSegment
Snake <-- DeathScreen

Games <-- PacMan


@enduml